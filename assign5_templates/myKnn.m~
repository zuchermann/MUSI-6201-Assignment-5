function [est_class] = myKnn(test_data, train_data, train_label, K)

%% Implements a kNN classifier
% 
% Input:
%   test_data:      num_features x num_test_points matrix, containing the test data features
%   train_data:     num_features x num_train_points matrix, containing the train data features
%   train_label:    1 x num_train_points vector, containing the training labels
%   K:              int, parameter for the kNN classifier
% Output:
%   est_class:      1 x num_test_points vector, containing the predicted labels for the test data points

%% Add your code here
size_test = size(test_data);
size_train = size(train_data);

num_features = size_test(1);
num_test_points = size_test(2);
num_train_points = size_train(2);

est_class = zeros(1, num_test_points);

test_point_index = 1;

while test_point_index <= num_test_points
    current_test_point = test_data(:,test_point_index);
    distances = zeros(num_train_points,1);
    train_point_index = 1;
    while train_point_index <= num_train_points
        current_train_point = train_data(:,train_point_index);
        distances(train_point_index) = myDist(current_train_point, current_test_point);
        train_point_index = train_point_index + 1;
    end
    [sorted_dist, sort_indexes] = sort(distances);
    nearest_classes = zeros(K,1);
    least_index = 1;
    while least_index <= K
        current_least_index = sort_indexes(least_index);
        current_class = train_label(1, current_least_index);
        nearest_classes(least_index) = current_class;
        least_index = least_index + 1;
    end
    current_test_class_label = myPickClass()
    test_point_index = test_point_index + 1;
end

end